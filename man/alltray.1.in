.TH alltray 1 "July 14, 2011" "Version @PACKAGE_VERSION@" "User Commands"
.ds UX U\s-3NIX\s+3
\#
.SH NAME
\#
alltray \(en Dock any program into the system tray on GTK2-based systems
\#
.SH SYNOPSIS
\#
.B alltray
[OPTION...] [\-\-]
.I [program] [args]
\#
.SH DESCRIPTION
\#
Start
.I program
with optional arguments provided in
.I args
and dock it to the system tray.  If
.I args
contains options which start with dashes (\- or \-\-) then the special
\(lqend of options\(rq argument (\-\-) must be given before
.I program
on the command line.  See \fBEXAMPLES\fR below for examples on invoking
AllTray.

AllTray only works on \*(UX and \*(UX-like operating systems with the X11
Window System and compliant window management and system tray management
software running.

AllTray has two modes: regular and \(lqattach\(rq mode.  By default,
AllTray will run in regular mode; to attach to an application, specify
the \-\-attach argument, and AllTray will let you select which
application to attach to.  Additionally, if you want to attach to a
specific already running process, you can specify both \-\-attach and
\-\-process arguments (or simply \-\-process, which implies
\-\-attach); see \fBOPTIONS\fR for more information.
\#
.SH OPTIONS
\#
.IP "\-?, \-\-help"
Show the help (usage) screen.
.IP "\-a, \-\-attach"
Attaches to an already-running application.  If \-\-process is not
specified, AllTray will prompt the user to click on a window for the
application the user would like to dock.
.IP "\-C, \-\-enable\-ctt"
Enable the Close-To-Tray support in AllTray.  When Close-To-Tray is
enabled (it is not enabled by default), a small AllTray icon at an
approximately \-45 degree angle will appear in the top-right corner of
the target application's window.  To close the window to the tray,
click on the miniaturized AllTray icon.  This feature is new, and
therefore not enabled by default.  (However, if you wish to have it
enabled always, check out the \fBENVIRONMENT VARIABLES\fR section of
this man page.)  \fIAlso, note that CTT support does not yet work with
GNOME Terminal, see \fBBUGS\fI for more information.\fR
.IP "\-D, \-\-debug"
Enable the debug message printing mechanism of AllTray.  Note that
this requires also setting the environment variable
\fBALLTRAY_DEBUG\fR, to get any debug output; see the \fBENVIRONMENT
VARIABLES\fR section below.  \fIThis option is hidden from the
\-\-help output, but it can be used.\fR
.IP "\-H, \-\-hide"
Hide the target application when AllTray is started or successfully
attaches to the application.  This used to be default behavior in
older versions of AllTray (versions prior to AllTray 0.7.0dev); it is
no longer the default.
.IP "\-K \fBKEY\fR, \-\-hotkey=\fBKEY\fR"
Enable hotkey support.  Hotkeys are specified as a + separated list of
modifiers and a single key.  Modifiers are \fIshift\fR, \fIctrl\fR,
\fIalt\fR, \fIaltgr\fR, or \fIsuper\fR.  An example might be
\fIctrl+shift+e\fR, for example if you are docking the Evolution
program.
.IP "\-L, \-\-list\-debug\-opts"
Lists the debug \(lqflags\(rq that AllTray supports.  The items in
this list are allowed values in an environment variable named
\fBALLTRAY_DEBUG\fR; see the \fBENVIRONMENT VARIABLES\fR section for
more information.  \fIThis option is hidden from the \-\-help output,
but it can be used.\fR
.IP "\-p \fBPID\fR, \-\-process=\fBPID\fR"
Specifies the process ID of the application to attach to; implies
\-\-attach.
.IP "\-v, \-\-version"
Show the program version, copyright, and license, then exit.  If the
build of AllTray was built from a development tree, some information
on the exact revision it was built from will also appear.
.IP "\-V, \-\-extended-version"
Show the program version, copyright, license, and build information,
then exit.
\#
.SH ENVIRONMENT VARIABLES
\#
.IP "ALLTRAY_OPTIONS"
AllTray reads this environment variable for any default options.  Any of
the options above in \fBOPTIONS\fR can be specified in this environment
variable.  This environment variable is looked at \fIbefore\fR the
command line, so the command line will override it should there be any
conflict.
.IP "ALLTRAY_DEBUG"
When the \-d or \-\-debug options are specified on the command line,
AllTray looks at this environment variable to see which types of debug
messages you are interested in seeing.  For example, setting this
variable to \(lqCMDLINE X11\(rq and enabling debugging will tell AllTray to
display messages pertaining to command-line parsing and communication
with the X Window System.

For a list of valid tokens, run \(lqalltray -L\(rq which will output the
list of supported debugging messages.  Also, you can specify \fBALL\fR
to enable every type of debugging message that AllTray supports.
.IP "DISPLAY"
AllTray reads this environment variable to determine how to find and
connect to your instance of the X Window System.  Using the \-\-display
command line option can override it, or provide it if unset.
\#
.SH EXAMPLES
\#
Here are some examples of invoking AllTray in various situations:
.IP "Simple example"
.ft C
alltray evolution
.ft P
\#
.IP "Simple debugging example"
.ft C
ALLTRAY_DEBUG="ALL" alltray \-D evolution
.ft P
\#
.IP "Client command line arguments example"
.ft C
alltray \-\- xterm \-geometry 132x40
.ft P
\#
.SH DIAGNOSTICS
\#
AllTray will exit with return code 1 and an error message if it is
unable to execute the specified program.

If there is a problem getting AllTray working and it doesn't seem to be
giving an error, please run AllTray as in the debugging example, above,
and read the output of that.  It may give vital clues as to what is
wrong.  Almost certainly always if you do this, you'll want to also
file a bug report.

When running AllTray from menus from within a desktop environment, all
diagnostics will appear in the
.ft C
~/.xsession-errors
.ft P
file.
\#
.SH REQUIREMENTS
\#
AllTray \fBrequires\fR a window manager which implements the EWMH
specification (and thus by definition the ICCCM specification).  It
also \fBrequires\fR another process which fills the role of the system
tray, as specified in the \fISystem Tray Specification\fR.  At this
time, this means that AllTray does not work with the Unity user
interface from Canonical, because it has (intentionally) omitted
support for the System Tray Specification.  In order to use AllTray
with Unity, please find a system tray application that works with
Unity first.  Support for Ayatana will be included in a future release
of AllTray, most likely 0.7.6dev.

Some window manager/desktop environment combinations may not honor all
of AllTray's requests.  If you find such a combination, please file a
bug report against AllTray so that it may be investigated.  If it is a
problem in AllTray (or AllTray can somehow work around it without
introducing other problems), the bug report will be fixed.  If the bug
is discovered to be in the desktop environment or window manager, a
bug will be filed against the appropriate project, if possible.
\#
.SH BUGS
\#
AllTray currently does not work well for users who utilize session
management in their desktop environment or window manager software.
This issue is known.  There is no fix available at this time; session
management awareness is planned for the future; it is presently not a
huge priority, but if you would like the feature, please file a bug in
Launchpad (or comment, if there is already a bug requesting this
feature) so that I have an idea of what type of priority should be
assigned to this feature.

AllTray currently does not support systems that do \fInot\fR have GTK
2.x installed on them, for example GNOME 3 systems that do not have
GTK 2 libraries available.  This will be fixed in a future release; at
the present moment in time, the author does not have a GTK3 based
system.

On some window managers, when using AllTray in attach mode without
specifying a process ID, you must click the window itself and not the
window decoration.  Compiz is one such window manager; there may be
others.

Close-to-Tray (CTT) support does not work for the GNOME Terminal
application; when attempting to use CTT support on the GNOME Terminal
application, the CTT helper process dies with an X \(lqBadMatch\(rq
error when attempting to use it with GNOME Terminal.  Please do not
file a bug in such a case: it is already known.  However, \fIif this
happens with any other software\fR please file a bug report.  You will
be able to see the X error message text in your
.ft C
~/.xsession-errors
.ft P
file.

There are likely undiscovered bugs.  If you should find one, please
report it at
.ft C
https://launchpad.net/alltray/+filebug
.ft P

Also, please note: if you are using a distribution-packaged version of
AllTray, before filing a bug report against AllTray itself,
\fBplease\fR confirm that the bug exists in stock (upstream) AllTray.
If you cannot confirm that, please file a bug using your
distribution's normal bug\-tracking procedures, and if it is an
upstream bug, your distribution will send the bug to the AllTray
project on Launchpad.
\#
.SH AUTHORS
\#
AllTray was started in 2004 by Jochen Baier <email@jochen-baier.de>.
Michael B. Trausch became the maintainer in 2009 and has started a
complete re-write of the AllTray code.  This release,
@PACKAGE_VERSION@, is a result of that (continuing) re-write.
\#
.SH COPYRIGHT
\#
Copyright \(co 2009, 2010, 2011 Michael B. Trausch <mike@trausch.us>

AllTray's source code, this manual page, and .desktop files are
licensed under the terms of the GNU GPL Version 3 license, as
published by the Free Software Foundation.  For the full-text of the
license, see the license as published on the GNU web site.  Some
portions of the software are licensed under the GNU LGPL Version 3,
permitting their re-use with slightly less strict terms.  The images
distributed with AllTray are licensed under the Creative Commons
Attribution-Noncommercial 3.0 (CC-BY-NC 3.0) license.

You should have received the license texts with this source distribution,
however if you did not, the license texts are available on the Internet;
see the \fBLINKS\fR section below.

If there is a need to use AllTray outside of these licensing terms,
contact the author for information.
\#
.SH DEVELOPMENT
\#
If you are interested in helping with AllTray's development, you can
help!  AllTray's development tree is hosted on GitHub, and AllTray
uses git (it used to use bzr, but it doesn't anymore).  See the
\fBLINKS\fR section below for the Web site to view the repository.  If
you need help with contributing, please send me an email, IM, or ping
me on IRC.  Email is the best bet, because I am not always at my
computer.  You can also obtain help from the #git or #github channels
on FreeNode's IRC network.

If you need to learn about git, the book \fIPro Git\fR is available
for free; see the link below in the \fBLINKS\fR section.
\#
.SH LINKS
\#
The GNU GPL Version 3.0 is available on the Internet at
.ft C
http://www.gnu.org/licenses/gpl-3.0.html
.ft P

The GNU LGPL Version 3.0 is available on the Internet at
.ft C
http://www.gnu.org/licenses/lgpl-3.0.html
.ft P

The Creative Commons Attribution-Noncommercial 3.0 license is available
on the Internet at
.ft C
http://creativecommons.org/licenses/by-nc-nd/3.0/us/
.ft P

AllTray's web site is available on the Internet at
.ft C
http://alltray.trausch.us/
.ft P

AllTray's project page is available on the Internet at
.ft C
https://launchpad.net/alltray
.ft P

AllTray's source code is available at GitHub:
.ft C
https://github.com/mbt/alltray
.ft P

The ICCCM is available on the Internet at
.ft C
http://tronche.com/gui/x/icccm/
.ft P

The EWMH is available on the Internet at
.ft C
http://standards.freedesktop.org/wm-spec/wm-spec-latest.html
.ft P

The System Tray Specification is available on the Internet at
.ft C
http://standards.freedesktop.org/systemtray-spec/systemtray-spec-latest.html
.ft P

The Ayatana indicators specification is available on the Internet at
.ft C
https://wiki.ubuntu.com/DesktopExperienceTeam/ApplicationIndicators#Typical_usage_.28C_version.29
.ft P

The book \fIPro Git\fR is available on the Internet at
.ft C
http://progit.org/book/
.ft P
in HTML (online), PDF, Mobipocket, and ePub formats.
